0912 문제해결기법
자료구조 일련의 동일한 타입의 데이터를 정돈하여 저장된 구성체
	저장된 데이터에 대해 탐색 삽입 삭제 연산을 효율적으로 수행하기 위헤
	(데이터+데이터에 관련된 연산)과 함께 고려하여 만들어야

효율적인 알고리즘
	입력 데이터를 위한 효율적인 자료구조
	알고리즘 수행과정에서 만들어지는 데이터도 효율적인 자료구조에 저장되어야

2.1 순환	
	함수 메소드의 실행과정 중 스스로를 호출하는것(재귀 recursion)
	함수가 순환호출할 때 무한 호출을 방지해야 함
	base case	스스로를 더이상 호출하지 않는 부분
	순환 case	스스로를 호출하는 부분

팩토리얼	반복문을 이용한 계산은 함수호출로 인해 시스템 스택을 사용하지 않으므로 순		환을 이용한 계산보다 메모리를 덜 사용함

리스트의 첫 원소부터 좌에서 우로 하나씩 K와 비교- 순차탐색(정렬되어있지 않을 때)
	만약 리스트가 정렬되어있을경우	
	- 중간에 있는 원소와 K비교
	중간원소와 같으면 탐색성공, 작으면 앞부분에 K탐색, 크면 뒷부분에 K탐색

이진탐색	오름차순으로 정렬된 데이터를 반으로 나누고, 나누어진 반을 다시 반으로 나누고, 
	이 과정을 반복하여 원하는 숫자를 찾는 알고리즘

colab	구글로 코딩가능

수행시간	n/2^k = 1	k = log₂ n 	수행시간 O(log n)


2.2 단순연결리스트
	동적메모리할당을 이용해 리스트를 구현하는 가장 간단한 자료구조
	노드에 저장된 레퍼런스가 다음 노드를 가리켜서 노드들을 한 줄로 연결
수행시간	O(n)	중간에 삽입/삭제시 O(n)	맨앞,맨뒤 O(1)


2.3 스택, 큐
스택	한 쪽 끝에서만 item(항목)을 삭제하거나 새로운 아이템을 저장하는 자료구조
	삽입연산: push	삭제연산: pop
	연산시간 push/pop O(1)
큐	선입선출
	add romove O(1)
	리스트 크기 확대 축소 O(n)


2.4 이진트리 이진 힙
	새 항목 삽입 시 뒤따르는 항목 이동
트리	root child parent leaf sibling ancestor descendant subtree level height key

이진트리	empty거나 empty가 아니면 루트와 2개의 이진 트리인 
	왼쪽서브트리와 오른쪽서브트리로 구성된다. 각 서브트리는 이진트리이다

	포화이진트리 (perfect binary tree)	
		모든 이파리의 깊이가 같고 각 내부 노드가 2개의 자식을 가지는 트리
	완전이진트리 (complete binary tree)
		마지막 레벨을 제외한 각 레벨이 노드로 꽉 차있고, 
		마지막 레벨에는 노드가 왼쪽부터 빠짐없이 채워진 트리
이진트리의 속성
	레벨 k에 있는 최대 노드 수 = 2^(k-1)
	높이가 h 인 포화이진트리에 있는 노드 수 = 2^k - 1
	n개의 노드를 가진 완전이진트리의 높이 [log₂(n+1)]
	
	a[i]의 부모는 a[i//2]
	a[i]의 왼쪽자식은 a[2i]
	a[i]의 오른쪽자식은 a[2i+1]

이진힙	우선순위 큐를 구현하는 가장 기본적인 자료구조
	완전 이진트리로서 부모의 우선순위가 자식의 우선순위보다 높은 자료구조
	최소힙 	키에는 최소키가 저장
	최대힙



과제 회문검사
앞뒤로 읽어도 같은단어를 팰린드롬이라 한다
입력한 문자열이 팰린드롬이면  yes와 처음부터 중간까지의 문자를 출력한다
아니면  no와 원래의 문자열에 순서를 뒤집은 문자열을 연결하여 만든 팰린드롬을 출력하라

1. 주어진 문자열이 팰린드롬이면 첫 행에는 yes, 둘쨰 행에는 팰린드롬 문자열의 처음부터 중간까지 출력한다
2. 아니면 no, 주어진 문자열을 뒤집어서 연결하여 만든 팰린드롬을 출력한다.
